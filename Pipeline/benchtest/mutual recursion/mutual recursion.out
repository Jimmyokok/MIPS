 0x0 : # 在编译原理的语法分析中，很多文法都是递归形式给出的。 | 
 0x0 : # 假设有如下文法：           | 
 0x0 : # G[F]:              | 
 0x0 : # F → fG | a         | 
 0x0 : # G → gF             | 
 0x0 : # 判断字符串 a 是否满足的程序如下： | 
 0x0 : #                    | 
 0x0 : # int F(int pos)     | 
 0x0 : # {                  | 
 0x0 : #     if(a[pos] == 'a')  return pos+1; | 
 0x0 : #     if(a[pos] == 'f') return G(pos+1); | 
 0x0 : #     return -1;     | 
 0x0 : # }                  | 
 0x0 : #                    | 
 0x0 : # int G(int pos)     | 
 0x0 : # {                  | 
 0x0 : #     if(a[pos] == 'g')  return F(pos+1); | 
 0x0 : #     return -1;     | 
 0x0 : # }                  | 
 0x0 : # b = F(0);          | 
 0x0 :                      | 
 0x0 : # 将字符串"fgfga"置入从0x00000000($s0)开始的空间 | 
 0x0 : # 因为不支持sb指令，所以用sw代替  | 
 0x0 : addi $s0, $0, 0      | 20100000
 0x4 : addi $t0, $0, 102    | 20080066
 0x8 : sw $t0, 0($s0)       | ae080000
 0xc : addi $t0, $0, 103    | 20080067
0x10 : sw $t0, 4($s0)       | ae080004
0x14 : addi $t0, $0, 102    | 20080066
0x18 : sw $t0, 8($s0)       | ae080008
0x1c : addi $t0, $0, 103    | 20080067
0x20 : sw $t0, 12($s0)      | ae08000c
0x24 : addi $t0, $0, 97     | 20080061
0x28 : sw $t0, 16($s0)      | ae080010
0x2c : # 初始化栈指针             | 
0x2c : addi $sp, $0, 128    | 201d0080
0x30 :                      | 
0x30 : # 调用F(0)。调用返回后，将返回值($v0)存入变量b($s1)。 | 
0x30 : addi $a0, $0, 0      | 20040000
0x34 : jal F                | 0c000013
0x38 : addi $s1, $v0, 0     | 20510000
0x3c : nop                  | 00000000
0x40 : nop                  | 00000000
0x44 : nop                  | 00000000
0x48 : nop                  | 00000000
0x4c :                      | 
0x4c : F:                   | 
0x4c : # 申请栈帧空间，存储保留寄存器     | 
0x4c : addi $sp, $sp, -8    | 23bdfff8
0x50 : sw $a0, 4($sp)       | afa40004
0x54 : sw $ra, 0($sp)       | afbf0000
0x58 :                      | 
0x58 : # 读取a[pos]           | 
0x58 : sll $t9, $a0, 2      | 0004c880
0x5c : add $t9, $s0, $t9    | 0219c820
0x60 : lw $t0, 0($t9)       | 8f280000
0x64 :                      | 
0x64 : # 第一个if语句            | 
0x64 : addi $t1, $0, 97     | 20090061
0x68 : bne $t0, $t1, F1     | 15280002
0x6c : # 设定返回值              | 
0x6c : addi $v0, $a0, 1     | 20820001
0x70 : j F_ret              | 08000023
0x74 :                      | 
0x74 : F1:                  | 
0x74 : # 第二个if语句            | 
0x74 : addi $t1, $0, 102    | 20090066
0x78 : bne $t0, $t1, F2     | 15280003
0x7c : addi $a0, $a0, 1     | 20840001
0x80 : jal G                | 0c000027
0x84 : j F_ret              | 08000023
0x88 :                      | 
0x88 : F2:                  | 
0x88 : addi $v0, $0, -1     | 2002ffff
0x8c : F_ret:               | 
0x8c : # 释放栈帧空间，恢复保留寄存器     | 
0x8c : lw $ra, 0($sp)       | 8fbf0000
0x90 : lw $a0, 4($sp)       | 8fa40004
0x94 : addi $sp, $sp, 8     | 23bd0008
0x98 : jr $ra               | 03e00008
0x9c :                      | 
0x9c : G:                   | 
0x9c : addi $sp, $sp, -8    | 23bdfff8
0xa0 : sw $a0, 4($sp)       | afa40004
0xa4 : sw $ra, 0($sp)       | afbf0000
0xa8 :                      | 
0xa8 : sll $t9, $a0, 2      | 0004c880
0xac : add $t9, $s0, $t9    | 0219c820
0xb0 : lw $t0, 0($t9)       | 8f280000
0xb4 :                      | 
0xb4 : addi $t1, $0, 103    | 20090067
0xb8 : bne $t0, $t1, G1     | 15280003
0xbc : addi $a0, $a0, 1     | 20840001
0xc0 : jal F                | 0c000013
0xc4 : j G_ret              | 08000033
0xc8 :                      | 
0xc8 : G1:                  | 
0xc8 : addi $v0, $0, -1     | 2002ffff
0xcc : G_ret:               | 
0xcc : lw $ra, 0($sp)       | 8fbf0000
0xd0 : lw $a0, 4($sp)       | 8fa40004
0xd4 : addi $sp, $sp, 8     | 23bd0008
0xd8 : jr $ra               | 03e00008